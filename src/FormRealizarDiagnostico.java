/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Patrick Felipi Cursino Fonseca - TIA: 3125393-8
 */

import javax.swing.*;
import java.text.*;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

public class FormRealizarDiagnostico extends javax.swing.JFrame {
    String rgStatic = null;
    String cpfStatic = null;
    static int idAtendente;
    static int idExame;
    static int idPaciente;
    ArrayList<Integer> atendente;
    ArrayList<Integer> exame;
    boolean flag = false;
    boolean verifica = false;
    /**
     * Creates new form FormRealizarDiagnostico
     */
    public FormRealizarDiagnostico() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painel1 = new javax.swing.JPanel();
        labNome = new javax.swing.JLabel();
        txtNomePaciente = new javax.swing.JTextField();
        labRG = new javax.swing.JLabel();
        txtRG = new javax.swing.JTextField();
        painel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaDiagnostico = new javax.swing.JTextArea();
        btnRealizarDiagnostico = new javax.swing.JButton();
        painel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaAtendentes = new javax.swing.JTable();
        painel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaExames = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Diagnóstico");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        painel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Paciente: "));

        labNome.setText("NOME DO PACIENTE :");

        txtNomePaciente.setToolTipText("Nome do Paciente");
        txtNomePaciente.setEnabled(false);
        txtNomePaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomePacienteActionPerformed(evt);
            }
        });

        labRG.setText("RG:");

        txtRG.setToolTipText("RG");
        txtRG.setEnabled(false);
        txtRG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRGKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout painel1Layout = new javax.swing.GroupLayout(painel1);
        painel1.setLayout(painel1Layout);
        painel1Layout.setHorizontalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(labNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(labRG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtRG, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        painel1Layout.setVerticalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labNome)
                    .addComponent(txtNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labRG)
                    .addComponent(txtRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        painel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Diagnóstico:"));
        painel4.setToolTipText("");

        txtAreaDiagnostico.setColumns(20);
        txtAreaDiagnostico.setRows(5);
        txtAreaDiagnostico.setToolTipText("Escrever Diagnóstico");
        jScrollPane1.setViewportView(txtAreaDiagnostico);

        javax.swing.GroupLayout painel4Layout = new javax.swing.GroupLayout(painel4);
        painel4.setLayout(painel4Layout);
        painel4Layout.setHorizontalGroup(
            painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        painel4Layout.setVerticalGroup(
            painel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnRealizarDiagnostico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Knob Valid Green.png"))); // NOI18N
        btnRealizarDiagnostico.setText("Realizar Diagnóstico");
        btnRealizarDiagnostico.setToolTipText("Realizar Diagnóstico");
        btnRealizarDiagnostico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarDiagnosticoActionPerformed(evt);
            }
        });

        painel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Atendentes:"));

        tabelaAtendentes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nome do Atendente", "TIA do Atendente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaAtendentes.setToolTipText("Atendentes");
        tabelaAtendentes.setEnabled(false);
        jScrollPane2.setViewportView(tabelaAtendentes);

        javax.swing.GroupLayout painel2Layout = new javax.swing.GroupLayout(painel2);
        painel2.setLayout(painel2Layout);
        painel2Layout.setHorizontalGroup(
            painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        painel2Layout.setVerticalGroup(
            painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );

        painel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Exames:"));

        tabelaExames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nome do Exame", "Código do Exame"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaExames.setToolTipText("Exames");
        tabelaExames.setEnabled(false);
        jScrollPane3.setViewportView(tabelaExames);

        javax.swing.GroupLayout painel3Layout = new javax.swing.GroupLayout(painel3);
        painel3.setLayout(painel3Layout);
        painel3Layout.setHorizontalGroup(
            painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                .addContainerGap())
        );
        painel3Layout.setVerticalGroup(
            painel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRealizarDiagnostico)
                .addGap(127, 127, 127))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRealizarDiagnostico)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomePacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomePacienteActionPerformed

    }//GEN-LAST:event_txtNomePacienteActionPerformed

    private void txtRGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRGKeyTyped

    }//GEN-LAST:event_txtRGKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        FormProcurarPaciente_Diagnostico consultarPaciente = new FormProcurarPaciente_Diagnostico();
        String retRG = consultarPaciente.retornoRG;
        String retCPF = consultarPaciente.retornoCPF;
        atendente = new ArrayList<Integer>();
        exame = new ArrayList<Integer>();
        try {
            // fazer a conexão com o banco de dados
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");
            //definir um objeto para uso dos comandos SQL
            Statement st = c.createStatement();
            // definir o comando SELECt 
            
            ResultSet rs = null;
            if(retRG == null){
                rs = st.executeQuery("SELECT * FROM Paciente WHERE CPF = '" + retCPF + "';");
                cpfStatic = retCPF;
            }else if(retCPF == null){
                rs = st.executeQuery("SELECT * FROM Paciente WHERE RG = '" + retRG + "';");
                rgStatic = retRG;
            }
            
            consultarPaciente.retornoRG = null;
            consultarPaciente.retornoCPF = null;
            
            String nome = null;
            // Ler cada registro da tabela para exibir no JTextArea
            while (rs.next()) {
                idPaciente = rs.getInt("idPaciente");
                nome = rs.getString("NomePaciente");
                String rg = rs.getString("RG");

                txtNomePaciente.setText(nome);
                txtRG.setText(rg);
            }
            if(nome == null){
                JOptionPane.showMessageDialog(null, "Desculpe! O PACIENTE não existe !", "Erro", JOptionPane.WARNING_MESSAGE);
                this.dispose();
                consultarPaciente.setVisible(true);
                consultarPaciente.setLocationRelativeTo(null);
                verifica = true;
            }
            
            ResultSet ra = st.executeQuery("SELECT Diagnostico FROM Diagnostico WHERE idPaciente = " + idPaciente + ";");
            while (ra.next()) {
                String texto = ra.getString("Diagnostico");
                
                if(texto != null){
                    txtAreaDiagnostico.setText(texto);
                    flag = true;
                }else{
                    txtAreaDiagnostico.setText("");
                    flag = false;
                }
            }
            
            ResultSet rc = st.executeQuery("SELECT * FROM Prontuario WHERE idPaciente = " + idPaciente + ";");
            int idDiagnosticoPaciente = 0;
            while (rc.next()) {
                idDiagnosticoPaciente = rc.getInt("idPaciente");
                idAtendente = rc.getInt("idAtendente"); 
                atendente.add(idAtendente);
                idExame = rc.getInt("idExame");
                exame.add(idExame);
            }
            if(idDiagnosticoPaciente == 0 && verifica == false){
                    JOptionPane.showMessageDialog(null, "Desculpe! O PACIENTE não possui EXAMES !", "Erro", JOptionPane.WARNING_MESSAGE);
                    this.dispose();
                    consultarPaciente.setVisible(true);
                    consultarPaciente.setLocationRelativeTo(null);
            }
            
            DefaultTableModel model =  new DefaultTableModel();
            model.setColumnIdentifiers(new Object[]{"Nome do Atendente", "TIA do Atendente"});
            
            tabelaAtendentes.setModel(model);
            
            String nomeAtendente = null;
            int tiaAtendente = 0;
            
            for(int i=0; i<atendente.size(); i++){
                String sql = "SELECT NomeAtendente, TIA FROM Atendente WHERE idAtendente = " + atendente.get(i) + " ORDER BY NomeAtendente ASC;";
                
                ResultSet rt = st.executeQuery(sql);           
                
                while (rt.next()) {
                    nomeAtendente = rt.getString("NomeAtendente");
                    tiaAtendente = rt.getInt("TIA");
                    model.addRow(new Object[]{nomeAtendente, tiaAtendente});
                }
            }
            
            DefaultTableModel model1 =  new DefaultTableModel();
            model1.setColumnIdentifiers(new Object[]{"Nome do Exame", "Código do Exame"});
            
            tabelaExames.setModel(model1);
            
            String nomeExame = null;
            int numeroExame = 0;
            
            for(int i=0; i<exame.size(); i++){
                String sql = "SELECT NomeExame, NumeroExame FROM ListaExame WHERE idExame = " + exame.get(i) + " ORDER BY NomeExame ASC;";
                
                ResultSet ri = st.executeQuery(sql);           
                
                while (ri.next()) {
                    nomeExame = ri.getString("NomeExame");
                    numeroExame = ri.getInt("NumeroExame");
                    model1.addRow(new Object[]{nomeExame, numeroExame});
                }
            }
            
            //fecha a conexão
            st.close();
            c.close();
            
        } catch (ClassNotFoundException erro) {
            JOptionPane.showMessageDialog(null, " Driver JDBC não encontrado!\n  " + erro.toString());
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, " Problemas na conexão com a fonte de dados!\n" + erro.toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnRealizarDiagnosticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarDiagnosticoActionPerformed
        FormProcurarPaciente_Diagnostico consultarPaciente = new FormProcurarPaciente_Diagnostico();
        String retRG = consultarPaciente.retornoRG;
        String retCPF = consultarPaciente.retornoCPF;
        String diagnostico = txtAreaDiagnostico.getText();
        if (diagnostico.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe o Diagnóstico !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtAreaDiagnostico.grabFocus();
        } else {    
            try {
                // fazer a conexão com o banco de dados
                Class.forName("com.mysql.jdbc.Driver");
                Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");

                //definir um objeto para uso dos comandos SQL
                Statement st = c.createStatement();

                //obter os dados digitados
                String texto = txtAreaDiagnostico.getText();
                
                String comando = null;
                if(flag == false){
                    comando = "INSERT INTO Diagnostico (idPaciente, Diagnostico) VALUES (" + idPaciente + ", '" + texto + "')";
                }else{
                    comando = "UPDATE Diagnostico SET Diagnostico = '" + texto + "' WHERE idPaciente = " + idPaciente + ";";
                }
                
                st.execute(comando);
                if(flag == false){
                    JOptionPane.showMessageDialog(null, "Diagnóstico INSERIDO com sucesso !");
                }else{
                    JOptionPane.showMessageDialog(null, "Diagnóstico ALTERADO com sucesso !");
                }
                //fecha a conexão2
                st.close();
                c.close();
                
                consultarPaciente.retornoRG = null;
                consultarPaciente.retornoCPF = null;

                this.dispose();
                consultarPaciente.setVisible(true);
                consultarPaciente.setLocationRelativeTo(null);
            } catch (ClassNotFoundException erro) {
                JOptionPane.showMessageDialog(null,
                        " Driver JDBC não encontrado !\n  " + erro.toString());

            } catch (SQLException erro) {
                JOptionPane.showMessageDialog(null,
                        " Problemas na conexão com a fonte de dados!\n" + erro.toString());
            }
        }
    }//GEN-LAST:event_btnRealizarDiagnosticoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormRealizarDiagnostico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormRealizarDiagnostico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormRealizarDiagnostico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormRealizarDiagnostico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormRealizarDiagnostico().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRealizarDiagnostico;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labNome;
    private javax.swing.JLabel labRG;
    private javax.swing.JPanel painel1;
    private javax.swing.JPanel painel2;
    private javax.swing.JPanel painel3;
    private javax.swing.JPanel painel4;
    private javax.swing.JTable tabelaAtendentes;
    private javax.swing.JTable tabelaExames;
    private javax.swing.JTextArea txtAreaDiagnostico;
    private javax.swing.JTextField txtNomePaciente;
    private javax.swing.JTextField txtRG;
    // End of variables declaration//GEN-END:variables
}
