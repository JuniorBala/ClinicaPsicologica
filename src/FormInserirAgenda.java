/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Patrick Felipi Cursino Fonseca - TIA: 3125393-8
 */

import javax.swing.*;
import java.text.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;

public class FormInserirAgenda extends javax.swing.JFrame {
    String rgStatic = null;
    String cpfStatic = null;
    static int idP;
    static int idE;
    HashMap<String, Integer> myMap;
    boolean flag = false;
    /**
     * Creates new form FormInserirAgenda
     */
    public FormInserirAgenda() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        painel1 = new javax.swing.JPanel();
        labNome = new javax.swing.JLabel();
        txtNomePaciente = new javax.swing.JTextField();
        labRG = new javax.swing.JLabel();
        txtRG = new javax.swing.JTextField();
        painel2 = new javax.swing.JPanel();
        comboDia = new javax.swing.JComboBox();
        comboHora = new javax.swing.JComboBox();
        comboMinutos = new javax.swing.JComboBox();
        labDia = new javax.swing.JLabel();
        labHorario = new javax.swing.JLabel();
        comboMes = new javax.swing.JComboBox();
        comboExames = new javax.swing.JComboBox();
        labExames = new javax.swing.JLabel();
        comboAno = new javax.swing.JComboBox();
        btnInserir = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Inseir Agendamento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        painel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados Paciente:"));

        labNome.setText("NOME DO PACIENTE :");

        txtNomePaciente.setToolTipText("Inserir Nome do Paciente");
        txtNomePaciente.setEnabled(false);
        txtNomePaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomePacienteActionPerformed(evt);
            }
        });

        labRG.setText("RG:");

        txtRG.setToolTipText("RG");
        txtRG.setEnabled(false);
        txtRG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRGKeyTyped(evt);
            }
        });

        org.jdesktop.layout.GroupLayout painel1Layout = new org.jdesktop.layout.GroupLayout(painel1);
        painel1.setLayout(painel1Layout);
        painel1Layout.setHorizontalGroup(
            painel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(painel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(painel1Layout.createSequentialGroup()
                        .add(labNome)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(txtNomePaciente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(painel1Layout.createSequentialGroup()
                        .add(labRG)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(txtRG, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painel1Layout.setVerticalGroup(
            painel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(painel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labNome)
                    .add(txtNomePaciente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(painel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labRG)
                    .add(txtRG, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        painel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Agendamento:"));

        comboDia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        comboDia.setToolTipText("Dias");

        comboHora.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19" }));
        comboHora.setToolTipText("Hora");

        comboMinutos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "15", "30", "45" }));
        comboMinutos.setToolTipText("Minutos");

        labDia.setText("DIA / MES / ANO:");
        labDia.setToolTipText("Dia, Mes e Ano");

        labHorario.setText("HORA / MIN: ");
        labHorario.setToolTipText("Horário e Minuto");

        comboMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        comboMes.setToolTipText("Mês");

        comboExames.setToolTipText("Exames");

        labExames.setText("EXAMES:");
        labExames.setToolTipText("Exames");

        comboAno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025" }));
        comboAno.setToolTipText("Ano");

        org.jdesktop.layout.GroupLayout painel2Layout = new org.jdesktop.layout.GroupLayout(painel2);
        painel2.setLayout(painel2Layout);
        painel2Layout.setHorizontalGroup(
            painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(labDia)
                    .add(labHorario)
                    .add(labExames))
                .add(21, 21, 21)
                .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel2Layout.createSequentialGroup()
                        .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(comboHora, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(comboDia, 0, 86, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(painel2Layout.createSequentialGroup()
                                .add(comboMes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(comboAno, 0, 96, Short.MAX_VALUE))
                            .add(painel2Layout.createSequentialGroup()
                                .add(comboMinutos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, Short.MAX_VALUE))))
                    .add(comboExames, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 177, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        painel2Layout.setVerticalGroup(
            painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(comboDia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labDia)
                    .add(comboMes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(comboAno, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(comboHora, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(comboMinutos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labHorario))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(comboExames, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(labExames))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnInserir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Knob Valid Green.png"))); // NOI18N
        btnInserir.setText("Inserir Agendamento");
        btnInserir.setToolTipText("inserir Agendamento");
        btnInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirActionPerformed(evt);
            }
        });

        btnLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Knob Refresh.png"))); // NOI18N
        btnLimpar.setText("Limpar");
        btnLimpar.setToolTipText("Limpar Campos");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, painel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(88, 88, 88)
                .add(btnInserir)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnLimpar)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(painel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(painel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnInserir)
                    .add(btnLimpar))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomePacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomePacienteActionPerformed

    }//GEN-LAST:event_txtNomePacienteActionPerformed

    private void txtRGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRGKeyTyped

    }//GEN-LAST:event_txtRGKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        FormProcurarPaciente_Agenda_Incluir procurarPaciente = new FormProcurarPaciente_Agenda_Incluir();
        String retRG = procurarPaciente.retornoRG;
        String retCPF = procurarPaciente.retornoCPF;
        myMap = new HashMap<String, Integer>();
        try {
            // fazer a conexão com o banco de dados
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");
            //definir um objeto para uso dos comandos SQL
            Statement st = c.createStatement();
            // definir o comando SELECt 
            
            ResultSet rs = null;
            if(retRG == null){
                rs = st.executeQuery("SELECT * FROM Paciente WHERE CPF = '" + retCPF + "';");
                cpfStatic = retCPF;
            }else if(retCPF == null){
                rs = st.executeQuery("SELECT * FROM Paciente WHERE RG = '" + retRG + "';");
                rgStatic = retRG;
            }
            
            procurarPaciente.retornoRG = null;
            procurarPaciente.retornoCPF = null;
            
            String nome = null;
            // Ler cada registro da tabela para exibir no JTextArea
            while (rs.next()) {
                
                idP = rs.getInt("idPaciente");
                nome = rs.getString("NomePaciente");
                String rg = rs.getString("RG");

                txtNomePaciente.setText(nome);
                txtRG.setText(rg);
            }
            
            ResultSet rp = st.executeQuery("SELECT idExame, NomeExame FROM ListaExame ORDER BY NomeExame ASC;");
            
            // Ler cada registro da tabela para exibir no JTextArea
            while (rp.next()) {

                idE = rp.getInt("idExame");
                String nomeE = rp.getString("NomeExame");
                myMap.put(nomeE, idE);
                comboExames.addItem(nomeE);
            }
            
            if(nome == null){
                JOptionPane.showMessageDialog(null, "Desculpe! O PACIENTE não existe.", "Erro", JOptionPane.WARNING_MESSAGE);
                this.dispose();
                procurarPaciente.setVisible(true);
                procurarPaciente.setLocationRelativeTo(null);
            }
           
            //fecha a conexão
            st.close();
            c.close();
            
        } catch (ClassNotFoundException erro) {
            JOptionPane.showMessageDialog(null, " Driver JDBC não encontrado!\n  " + erro.toString());
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, " Problemas na conexão com a fonte de dados!\n" + erro.toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirActionPerformed
        FormVerificarAgenda verificarAgenda = new FormVerificarAgenda();    
        FormProcurarPaciente_Agenda_Incluir procurarPaciente = new FormProcurarPaciente_Agenda_Incluir();
        try {
            // fazer a conexão com o banco de dados
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");

            //definir um objeto para uso dos comandos SQL
            Statement st = c.createStatement();

            //obter os dados digitados
            
            ResultSet rs = st.executeQuery("SELECT * FROM Agenda WHERE idPaciente = " + idP + "");
            // Ler cada registro da tabela para exibir no JTextArea
            
            while(rs.next()){
                int iPaciente = rs.getInt("idPaciente");
                int iExame = rs.getInt("idExame");
                
                if(myMap.get(comboExames.getSelectedItem()) == iExame){
                    JOptionPane.showMessageDialog(null, "Este EXAME já foi INSERIDO no AGENDAMENTO do Paciente !", "Erro", JOptionPane.WARNING_MESSAGE);
                    flag = true;
                }
            }
            
            if(flag == false){
                String comando = "INSERT INTO Agenda (Dia, Mes, Hora, Min, idPaciente, idExame, Ano) VALUES('" + comboDia.getSelectedItem() + "', '" + comboMes.getSelectedItem() + "', '" + comboHora.getSelectedItem() + "', " + comboMinutos.getSelectedItem() + ", '" + idP + "', " + myMap.get(comboExames.getSelectedItem()) + ", '" + comboAno.getSelectedItem() + "')";
                st.execute(comando);
            }
            
            if(flag == false){
                JOptionPane.showMessageDialog(null, "Agendamento INCLUIDO com sucesso !");
                limparCampos();
                this.dispose();
                verificarAgenda.setVisible(true);
                verificarAgenda.setLocationRelativeTo(null);
            }else{
                limparCampos();
            }
            //fecha a conexão2
            st.close();
            c.close();

        } catch (ClassNotFoundException erro) {
            JOptionPane.showMessageDialog(null, " Driver JDBC não encontrado !\n  " + erro.toString());
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, " Problemas na conexão com a fonte de dados!\n" + erro.toString());
        }  
    }//GEN-LAST:event_btnInserirActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void limparCampos() {
        comboDia.setSelectedIndex(0);
        comboMes.setSelectedIndex(0);
        comboHora.setSelectedIndex(0);
        comboMinutos.setSelectedIndex(0);
        comboExames.setSelectedIndex(0);
        comboAno.setSelectedIndex(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormInserirAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormInserirAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormInserirAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormInserirAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormInserirAgenda().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInserir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JComboBox comboAno;
    private javax.swing.JComboBox comboDia;
    private javax.swing.JComboBox comboExames;
    private javax.swing.JComboBox comboHora;
    private javax.swing.JComboBox comboMes;
    private javax.swing.JComboBox comboMinutos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labDia;
    private javax.swing.JLabel labExames;
    private javax.swing.JLabel labHorario;
    private javax.swing.JLabel labNome;
    private javax.swing.JLabel labRG;
    private javax.swing.JPanel painel1;
    private javax.swing.JPanel painel2;
    private javax.swing.JTextField txtNomePaciente;
    private javax.swing.JTextField txtRG;
    // End of variables declaration//GEN-END:variables
}
