/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Patrick Felipi Cursino Fonseca - TIA: 3125393-8
 */

import javax.swing.*;
import java.text.*;
import java.sql.*;

public class FormAlterarClinica extends javax.swing.JFrame {
    String nomeStatic = null;
    String cnpjStatic = null;
    /**
     * Creates new form FormAtualizaClinica
     */
    public FormAlterarClinica() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painel1 = new javax.swing.JPanel();
        labNome = new javax.swing.JLabel();
        txtNomeClinica = new javax.swing.JTextField();
        labCNPJ = new javax.swing.JLabel();
        txtCNPJ = new javax.swing.JTextField();
        labEndereco = new javax.swing.JLabel();
        txtEndereco = new javax.swing.JTextField();
        labCEP = new javax.swing.JLabel();
        txtCEP = new javax.swing.JTextField();
        labTelefone = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JTextField();
        btnAtualizarClinica = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Alterar Clínica Credenciada");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        painel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados da Clínica:"));

        labNome.setText("NOME DA CLÍNICA :");

        txtNomeClinica.setToolTipText("Inserir Nome da CLínica");
        txtNomeClinica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeClinicaActionPerformed(evt);
            }
        });
        txtNomeClinica.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNomeClinicaKeyTyped(evt);
            }
        });

        labCNPJ.setText("CNPJ :");

        txtCNPJ.setToolTipText("CNPJ");
        txtCNPJ.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCNPJKeyTyped(evt);
            }
        });

        labEndereco.setText("ENDEREÇO :");
        labEndereco.setToolTipText("");

        txtEndereco.setToolTipText("Inserir Endereço");
        txtEndereco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEnderecoKeyTyped(evt);
            }
        });

        labCEP.setText("CEP :");

        txtCEP.setToolTipText("Inserir CEP");
        txtCEP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCEPKeyTyped(evt);
            }
        });

        labTelefone.setText("TELEFONE :");

        txtTelefone.setToolTipText("Inserir Telefone");
        txtTelefone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefoneKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout painel1Layout = new javax.swing.GroupLayout(painel1);
        painel1.setLayout(painel1Layout);
        painel1Layout.setHorizontalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(painel1Layout.createSequentialGroup()
                            .addComponent(labNome)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtNomeClinica, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(painel1Layout.createSequentialGroup()
                            .addComponent(labCNPJ)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(painel1Layout.createSequentialGroup()
                            .addComponent(labEndereco)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtEndereco)))
                    .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(painel1Layout.createSequentialGroup()
                            .addComponent(labTelefone)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtTelefone))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painel1Layout.createSequentialGroup()
                            .addComponent(labCEP)
                            .addGap(18, 18, 18)
                            .addComponent(txtCEP, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        painel1Layout.setVerticalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labNome)
                    .addComponent(txtNomeClinica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labCNPJ)
                    .addComponent(txtCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labEndereco)
                    .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labCEP)
                    .addComponent(txtCEP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labTelefone))
                .addContainerGap())
        );

        btnAtualizarClinica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Knob Refresh.png"))); // NOI18N
        btnAtualizarClinica.setText("Atualizar Campos");
        btnAtualizarClinica.setToolTipText("Atualizar Campos");
        btnAtualizarClinica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarClinicaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(btnAtualizarClinica)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAtualizarClinica)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomeClinicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeClinicaActionPerformed

    }//GEN-LAST:event_txtNomeClinicaActionPerformed

    private void txtCNPJKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCNPJKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
        int x = 0;
        String CNPJ = txtCNPJ.getText();
        x = CNPJ.length();
        if(x == 18){
            evt.consume();
        }
    }//GEN-LAST:event_txtCNPJKeyTyped

    private void txtCEPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCEPKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
        int x = 0;
        String cep = txtCEP.getText();
        x = cep.length();
        if(x == 11){
            evt.consume();
        }
    }//GEN-LAST:event_txtCEPKeyTyped

    private void btnAtualizarClinicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarClinicaActionPerformed
        String txt1 = txtNomeClinica.getText();
        String txt2 = txtCNPJ.getText();
        String txt3 = txtEndereco.getText();
        String txt4 = txtCEP.getText();
        String txt5 = txtTelefone.getText();
        if (txt1.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe o NOME DA CLÍNICA !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtNomeClinica.grabFocus();
        } else if (txt2.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe o CNPJ !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtCNPJ.grabFocus();
        } else if (txt3.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe o ENDEREÇO !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtEndereco.grabFocus();
        } else if (txt4.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe O CEP !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtCEP.grabFocus();
        } else if (txt5.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe O TELEFONE !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtTelefone.grabFocus();
        } else {
            FormProcurarClinica_Alterar procurarClinica = new FormProcurarClinica_Alterar();
            String retNome = procurarClinica.retornoNome;
            String retCNPJ = procurarClinica.retornoCNPJ;
            try {
                // fazer a conexão com o banco de dados
                Class.forName("com.mysql.jdbc.Driver");
                Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");

                //definir um objeto para uso dos comandos SQL
                Statement st = c.createStatement();

                //obter os dados digitados
                String nome = txtNomeClinica.getText();
                String cnpj = txtCNPJ.getText();
                String endereco = txtEndereco.getText();
                String cep = txtCEP.getText();
                String telefone = txtTelefone.getText();

                String comando = null;
                if (nomeStatic == null) {
                    comando = "UPDATE ClinicaExterna SET NomeClinica = '" + nome + "', CNPJ = '" + cnpj + "', Endereco = '" + endereco + "', CEP = " + cep + ", Telefone = '" + telefone + "' WHERE CNPJ = '" + cnpjStatic + "';";
                } else if (cnpjStatic == null) {
                    comando = "UPDATE ClinicaExterna SET NomeClinica = '" + nome + "', CNPJ = '" + cnpj + "', Endereco = '" + endereco + "', CEP = " + cep + ", Telefone = '" + telefone + "' WHERE NomeClinica = '" + nomeStatic + "';";
                }
                //String comando = "UPDATE ClinicaExterna SET NomeClinica = '" + nome + "', CNPJ = '" + cnpj + "', Endereco = '" + endereco + "', CEP = " + cep + ", Telefone = '" + telefone + "' WHERE CNPJ = " + retCNPJ + ";";
                //String comando = "UPDATE professor SET nomeProf = ' " + nome + " ', drtProf = ' " + drt + " ', digitoProf = ' " + digito + " ', salarioProf = ' " + salario + " ', qntAulasProf = ' " + qntAulas + " ', salarioExtraProf = ' " + salarioExtra + " ' WHERE drtProf = ' " + retDRT + " ';";
                
                st.execute(comando);
                JOptionPane.showMessageDialog(null, "Clínica Externa ALTERADA com sucesso !");

                //fecha a conexão2
                st.close();
                c.close();
                
                procurarClinica.retornoNome = null;
                procurarClinica.retornoCNPJ = null;

                this.dispose();
            } catch (ClassNotFoundException erro) {
                JOptionPane.showMessageDialog(null,
                        " Driver JDBC não encontrado !\n  " + erro.toString());

            } catch (SQLException erro) {
                JOptionPane.showMessageDialog(null,
                        " Problemas na conexão com a fonte de dados!\n" + erro.toString());
            }
        }
    }//GEN-LAST:event_btnAtualizarClinicaActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        FormProcurarClinica_Alterar procurarClinica = new FormProcurarClinica_Alterar();
        String retNome = procurarClinica.retornoNome;
        String retCNPJ = procurarClinica.retornoCNPJ;
        try {
            // fazer a conexão com o banco de dados
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");
            //definir um objeto para uso dos comandos SQL
            Statement st = c.createStatement();
            // definir o comando SELECt 
            
            ResultSet rs = null;
            if(retNome == null){
                rs = st.executeQuery("SELECT * FROM ClinicaExterna WHERE CNPJ = '" + retCNPJ + "';");
                cnpjStatic = retCNPJ;
            }else if(retCNPJ == null){
                rs = st.executeQuery("SELECT * FROM ClinicaExterna WHERE NomeClinica = '" + retNome + "';");
                nomeStatic = retNome;
            }
            
            procurarClinica.retornoNome = null;
            procurarClinica.retornoCNPJ = null;
            
            String nome = null;
            // Ler cada registro da tabela para exibir no JTextArea
            while (rs.next()) {

                nome = rs.getString("NomeClinica");
                String cnpj = rs.getString("CNPJ");
                String endereco = rs.getString("Endereco");
                int cep = rs.getInt("CEP");
                String telefone = rs.getString("Telefone");

                txtNomeClinica.setText(nome);
                txtCNPJ.setText(cnpj);
                txtEndereco.setText(endereco);
                txtCEP.setText(String.valueOf(cep));
                txtTelefone.setText(telefone);
            }
            if(nome == null){
                JOptionPane.showMessageDialog(null, "Desculpe! A CLINICA não existe.", "Erro", JOptionPane.WARNING_MESSAGE);
                this.dispose();
                procurarClinica.setVisible(true);
                procurarClinica.setLocationRelativeTo(null);
            }
            //fecha a conexão
            st.close();
            c.close();

        } catch (ClassNotFoundException erro) {
            JOptionPane.showMessageDialog(null, " Driver JDBC não encontrado!\n  " + erro.toString());
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, " Problemas na conexão com a fonte de dados!\n" + erro.toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void txtTelefoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefoneKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
        int x = 0;
        String tel = txtTelefone.getText();
        x = tel.length();
        if(x == 15){
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefoneKeyTyped

    private void txtNomeClinicaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeClinicaKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetter(c)){
            if(!Character.isWhitespace(c)){
                evt.consume();
            }
        }
        int x = 0;
        String nome = txtNomeClinica.getText();
        x = nome.length();
        if(x == 45){
            evt.consume();
        }
    }//GEN-LAST:event_txtNomeClinicaKeyTyped

    private void txtEnderecoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEnderecoKeyTyped
        int x = 0;
        String endereco = txtEndereco.getText();
        x = endereco.length();
        if(x == 35){
            evt.consume();
        }
    }//GEN-LAST:event_txtEnderecoKeyTyped
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAlterarClinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAlterarClinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAlterarClinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAlterarClinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormAlterarClinica().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizarClinica;
    private javax.swing.JLabel labCEP;
    private javax.swing.JLabel labCNPJ;
    private javax.swing.JLabel labEndereco;
    private javax.swing.JLabel labNome;
    private javax.swing.JLabel labTelefone;
    private javax.swing.JPanel painel1;
    private javax.swing.JTextField txtCEP;
    private javax.swing.JTextField txtCNPJ;
    private javax.swing.JTextField txtEndereco;
    private javax.swing.JTextField txtNomeClinica;
    private javax.swing.JTextField txtTelefone;
    // End of variables declaration//GEN-END:variables
}
