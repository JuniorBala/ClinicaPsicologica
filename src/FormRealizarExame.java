/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Patrick Felipi Cursino Fonseca - TIA: 3125393-8
 */

import javax.swing.*;
import java.text.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.util.HashMap;

public class FormRealizarExame extends javax.swing.JFrame {
    String rgStatic = null;
    String cpfStatic = null;
    static int idP;
    static int idA;
    static int idE;
    HashMap<String, Integer> myMapA;
    HashMap<String, Integer> myMapE;
    boolean flag = false;
    /**
     * Creates new form FormRealizarExame
     */
    public FormRealizarExame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painel1 = new javax.swing.JPanel();
        labNome = new javax.swing.JLabel();
        txtNomePaciente = new javax.swing.JTextField();
        labRG = new javax.swing.JLabel();
        txtRG = new javax.swing.JTextField();
        painel2 = new javax.swing.JPanel();
        labAtendente = new javax.swing.JLabel();
        labExame = new javax.swing.JLabel();
        comboAtendente = new javax.swing.JComboBox();
        comboExames = new javax.swing.JComboBox();
        btnValidarExame = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Exame");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        painel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Paciente: "));

        labNome.setText("NOME DO PACIENTE :");

        txtNomePaciente.setToolTipText("Inserir Nome do Paciente");
        txtNomePaciente.setEnabled(false);
        txtNomePaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomePacienteActionPerformed(evt);
            }
        });

        labRG.setText("RG:");

        txtRG.setToolTipText("RG");
        txtRG.setEnabled(false);
        txtRG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRGKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout painel1Layout = new javax.swing.GroupLayout(painel1);
        painel1.setLayout(painel1Layout);
        painel1Layout.setHorizontalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(labNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(labRG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtRG, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        painel1Layout.setVerticalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labNome)
                    .addComponent(txtNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labRG)
                    .addComponent(txtRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        painel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Exame:"));

        labAtendente.setText("ATENDENTE:");

        labExame.setText("EXAME:");

        comboAtendente.setToolTipText("Atendentes");

        comboExames.setToolTipText("Exames");

        javax.swing.GroupLayout painel2Layout = new javax.swing.GroupLayout(painel2);
        painel2.setLayout(painel2Layout);
        painel2Layout.setHorizontalGroup(
            painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addComponent(labAtendente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboAtendente, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel2Layout.createSequentialGroup()
                        .addComponent(labExame)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboExames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painel2Layout.setVerticalGroup(
            painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel2Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labAtendente)
                    .addComponent(comboAtendente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labExame)
                    .addComponent(comboExames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        btnValidarExame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Knob Valid Green.png"))); // NOI18N
        btnValidarExame.setText("Validar Exame");
        btnValidarExame.setToolTipText("Validar Exame");
        btnValidarExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidarExameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(painel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(btnValidarExame)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnValidarExame)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomePacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomePacienteActionPerformed

    }//GEN-LAST:event_txtNomePacienteActionPerformed

    private void txtRGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRGKeyTyped

    }//GEN-LAST:event_txtRGKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        FormProcurarPaciente_Exame procurarPaciente = new FormProcurarPaciente_Exame();
        String retRG = procurarPaciente.retornoRG;
        String retCPF = procurarPaciente.retornoCPF;
        myMapA = new HashMap<String, Integer>();
        myMapE = new HashMap<String, Integer>();
        try {
            // fazer a conexão com o banco de dados
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");
            //definir um objeto para uso dos comandos SQL
            Statement st = c.createStatement();
            // definir o comando SELECt 
            
            ResultSet rs = null;
            if(retRG == null){
                rs = st.executeQuery("SELECT * FROM Paciente WHERE CPF = '" + retCPF + "';");
                cpfStatic = retCPF;
            }else if(retCPF == null){
                rs = st.executeQuery("SELECT * FROM Paciente WHERE RG = '" + retRG + "';");
                rgStatic = retRG;
            }
            
            procurarPaciente.retornoRG = null;
            procurarPaciente.retornoCPF = null;
            
            String nome = null;
            // Ler cada registro da tabela para exibir no JTextArea
            while (rs.next()) {
                
                idP = rs.getInt("idPaciente");
                nome = rs.getString("NomePaciente");
                String rg = rs.getString("RG");
                int triagem = rs.getInt("Triagem");

                txtNomePaciente.setText(nome);
                txtRG.setText(rg);
                
                if(triagem != 1){
                    JOptionPane.showMessageDialog(null, "Desculpe! O PACIENTE não possui TRIAGEM !", "Erro", JOptionPane.WARNING_MESSAGE);
                    this.dispose();
                    procurarPaciente.setVisible(true);
                    procurarPaciente.setLocationRelativeTo(null);
                }
            }
            if(nome == null){
                JOptionPane.showMessageDialog(null, "Desculpe! O PACIENTE não existe.");
                this.dispose();
                procurarPaciente.setVisible(true);
                procurarPaciente.setLocationRelativeTo(null);
            }
            
            ResultSet rt = st.executeQuery("SELECT idAtendente, NomeAtendente FROM Atendente ORDER BY NomeAtendente;");
           
            // Ler cada registro da tabela para exibir no JTextArea
            while (rt.next()) {
                idA = rt.getInt("idAtendente");
                String nomeA = rt.getString("NomeAtendente");
                myMapA.put(nomeA, idA);
                comboAtendente.addItem(nomeA);
            }
            
            ResultSet rp = st.executeQuery("SELECT idExame, NomeExame FROM ListaExame ORDER BY NomeExame;");
            
            while (rp.next()) {
                idE = rp.getInt("idExame");
                String nomeE = rp.getString("NomeExame");
                myMapE.put(nomeE, idE);
                comboExames.addItem(nomeE);
            }
           
            //fecha a conexão
            st.close();
            c.close();
            
        } catch (ClassNotFoundException erro) {
            JOptionPane.showMessageDialog(null, " Driver JDBC não encontrado!\n  " + erro.toString());
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, " Problemas na conexão com a fonte de dados!\n" + erro.toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnValidarExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarExameActionPerformed
        FormProcurarPaciente_Exame procurarPaciente = new FormProcurarPaciente_Exame();
        try {
            // fazer a conexão com o banco de dados
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");

            //definir um objeto para uso dos comandos SQL
            Statement st = c.createStatement();

            //obter os dados digitados
            
            ResultSet rs = st.executeQuery("SELECT * FROM Prontuario WHERE idPaciente = " + idP + "");
            // Ler cada registro da tabela para exibir no JTextArea
            
            while(rs.next()){
                int iPaciente = rs.getInt("idPaciente");
                int iExame = rs.getInt("idExame");
                
                if(myMapE.get(comboExames.getSelectedItem()) == iExame){
                    JOptionPane.showMessageDialog(null, "Este EXAME já foi INSERIDO no PRONTUARIO do Paciente !", "Erro", JOptionPane.WARNING_MESSAGE);
                    flag = true;
                }
            }
            
            if(flag == false){
                String comando = "INSERT INTO Prontuario (idPaciente, idAtendente, idExame) VALUES(" + idP + ", " + myMapA.get(comboAtendente.getSelectedItem()) + ", " + myMapE.get(comboExames.getSelectedItem()) + ")";
                st.execute(comando);
            }
            
            if(flag == false){
                JOptionPane.showMessageDialog(null, "Exame INCLUIDO no PRONTUARIO do PACIENTE com sucesso !");
            }
            
            limparCampos();
            this.dispose();
            procurarPaciente.setVisible(true);
            procurarPaciente.setLocationRelativeTo(null);
            //fecha a conexão2
            st.close();
            c.close();

            //limparCampos();
            //txtNomePaciente.grabFocus();
            } catch (ClassNotFoundException erro) {
                JOptionPane.showMessageDialog(null, " Driver JDBC não encontrado !\n  " + erro.toString());
            } catch (SQLException erro) {
                JOptionPane.showMessageDialog(null, " Problemas na conexão com a fonte de dados!\n" + erro.toString());
            }
    }//GEN-LAST:event_btnValidarExameActionPerformed

    private void limparCampos() {
        comboAtendente.setSelectedIndex(0);
        comboExames.setSelectedIndex(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormRealizarExame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormRealizarExame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormRealizarExame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormRealizarExame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormRealizarExame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnValidarExame;
    private javax.swing.JComboBox comboAtendente;
    private javax.swing.JComboBox comboExames;
    private javax.swing.JLabel labAtendente;
    private javax.swing.JLabel labExame;
    private javax.swing.JLabel labNome;
    private javax.swing.JLabel labRG;
    private javax.swing.JPanel painel1;
    private javax.swing.JPanel painel2;
    private javax.swing.JTextField txtNomePaciente;
    private javax.swing.JTextField txtRG;
    // End of variables declaration//GEN-END:variables
}
