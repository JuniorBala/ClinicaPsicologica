/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Patrick Felipi Cursino Fonseca - TIA: 3125393-8
 */

import javax.swing.*;
import java.text.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;

public class FormExcluirAgenda extends javax.swing.JFrame {
    String rgStatic = null;
    String cpfStatic = null;
    String exameStatic = null;
    static int idP;
    static int idE;
    static int idExame;
    HashMap<String, Integer> myMap;
    boolean flag = false;
    /**
     * Creates new form FormExcluirAgenda
     */
    public FormExcluirAgenda() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        painel1 = new javax.swing.JPanel();
        labNome = new javax.swing.JLabel();
        txtNomePaciente = new javax.swing.JTextField();
        labRG = new javax.swing.JLabel();
        txtRG = new javax.swing.JTextField();
        painel2 = new javax.swing.JPanel();
        labDia = new javax.swing.JLabel();
        labHorario = new javax.swing.JLabel();
        labExame = new javax.swing.JLabel();
        txtMin = new javax.swing.JTextField();
        txtAno = new javax.swing.JTextField();
        txtMes = new javax.swing.JTextField();
        txtDia = new javax.swing.JTextField();
        txtHora = new javax.swing.JTextField();
        txtExame = new javax.swing.JTextField();
        btnExcluir = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Excluir Agendamento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        painel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados Paciente:"));

        labNome.setText("NOME DO PACIENTE :");

        txtNomePaciente.setToolTipText("Inserir Nome do Paciente");
        txtNomePaciente.setEnabled(false);
        txtNomePaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomePacienteActionPerformed(evt);
            }
        });

        labRG.setText("RG:");

        txtRG.setToolTipText("RG");
        txtRG.setEnabled(false);
        txtRG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRGKeyTyped(evt);
            }
        });

        org.jdesktop.layout.GroupLayout painel1Layout = new org.jdesktop.layout.GroupLayout(painel1);
        painel1.setLayout(painel1Layout);
        painel1Layout.setHorizontalGroup(
            painel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(painel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(painel1Layout.createSequentialGroup()
                        .add(labNome)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(txtNomePaciente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(painel1Layout.createSequentialGroup()
                        .add(labRG)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(txtRG, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painel1Layout.setVerticalGroup(
            painel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(painel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labNome)
                    .add(txtNomePaciente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(painel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labRG)
                    .add(txtRG, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        painel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Agendamento:"));

        labDia.setText("DIA / MES / ANO:");
        labDia.setToolTipText("Dia, Mes e Ano");

        labHorario.setText("HORA / MIN: ");
        labHorario.setToolTipText("Hor√°rio e Minuto");

        labExame.setText("EXAME:");
        labExame.setToolTipText("Exame");

        txtMin.setToolTipText("RG");
        txtMin.setEnabled(false);
        txtMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMinKeyTyped(evt);
            }
        });

        txtAno.setToolTipText("RG");
        txtAno.setEnabled(false);
        txtAno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAnoKeyTyped(evt);
            }
        });

        txtMes.setToolTipText("RG");
        txtMes.setEnabled(false);
        txtMes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMesKeyTyped(evt);
            }
        });

        txtDia.setToolTipText("RG");
        txtDia.setEnabled(false);
        txtDia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDiaKeyTyped(evt);
            }
        });

        txtHora.setToolTipText("RG");
        txtHora.setEnabled(false);
        txtHora.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHoraKeyTyped(evt);
            }
        });

        txtExame.setToolTipText("RG");
        txtExame.setEnabled(false);
        txtExame.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtExameKeyTyped(evt);
            }
        });

        org.jdesktop.layout.GroupLayout painel2Layout = new org.jdesktop.layout.GroupLayout(painel2);
        painel2.setLayout(painel2Layout);
        painel2Layout.setHorizontalGroup(
            painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(painel2Layout.createSequentialGroup()
                        .add(labHorario)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(painel2Layout.createSequentialGroup()
                        .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(labDia)
                            .add(labExame))
                        .add(18, 18, 18)
                        .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtExame, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                            .add(painel2Layout.createSequentialGroup()
                                .add(txtHora, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(txtMin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(painel2Layout.createSequentialGroup()
                                .add(txtDia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(txtMes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(txtAno, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(66, 66, 66))))
        );
        painel2Layout.setVerticalGroup(
            painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(painel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labDia)
                    .add(txtAno, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtMes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtDia, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labHorario)
                    .add(txtMin, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtHora, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(painel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labExame)
                    .add(txtExame, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mult.png"))); // NOI18N
        btnExcluir.setText("Excluir Agendamento");
        btnExcluir.setToolTipText("Excluir Agendamento");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(132, 132, 132)
                .add(btnExcluir)
                .addContainerGap(148, Short.MAX_VALUE))
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(painel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, painel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(285, Short.MAX_VALUE)
                .add(btnExcluir)
                .addContainerGap())
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(layout.createSequentialGroup()
                    .addContainerGap()
                    .add(painel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(painel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(86, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomePacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomePacienteActionPerformed

    }//GEN-LAST:event_txtNomePacienteActionPerformed

    private void txtRGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRGKeyTyped

    }//GEN-LAST:event_txtRGKeyTyped

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        FormVerificarAgenda verificarAgenda = new FormVerificarAgenda();
        try {
            // fazer a conex√£o com o banco de dados
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");

            //definir um objeto para uso dos comandos SQL
            Statement st = c.createStatement();

            //obter os dados digitados

            String comando = "DELETE FROM Agenda WHERE (idPaciente = " + idP + " AND idExame = " + idExame + ");";
            
            st.execute(comando);
            JOptionPane.showMessageDialog(null, "Agendamento EXCLUIDO com sucesso !");

            //fecha a conex√£o2
            st.close();
            c.close();
            
            this.dispose();
            verificarAgenda.setVisible(true);
            verificarAgenda.setLocationRelativeTo(null);
            
        } catch (ClassNotFoundException erro) {
            JOptionPane.showMessageDialog(null,
                    " Driver JDBC n√£o encontrado !\n  " + erro.toString());
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null,
                    " Problemas na conex√£o com a fonte de dados!\n" + erro.toString());
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        FormProcurarPaciente_Agenda_Excluir procurarPaciente = new FormProcurarPaciente_Agenda_Excluir();
        String retRG = procurarPaciente.retornoRG;
        String retCPF = procurarPaciente.retornoCPF;
        String retExame = procurarPaciente.retornoExame;
        myMap = new HashMap<String, Integer>();
        try {
            // fazer a conex√£o com o banco de dados
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");
            //definir um objeto para uso dos comandos SQL
            Statement st = c.createStatement();
            // definir o comando SELECt 
            
            ResultSet rs = null;
            if(retRG == null){
                rs = st.executeQuery("SELECT * FROM Paciente WHERE CPF = '" + retCPF + "';");
                cpfStatic = retCPF;
                exameStatic = retExame;
            }else if(retCPF == null){
                rs = st.executeQuery("SELECT * FROM Paciente WHERE RG = '" + retRG + "';");
                rgStatic = retRG;
                exameStatic = retExame;
            }
            
            procurarPaciente.retornoRG = null;
            procurarPaciente.retornoCPF = null;
            procurarPaciente.retornoExame = null;
            
            String nome = null;
            // Ler cada registro da tabela para exibir no JTextArea
            while (rs.next()) {
                idP = rs.getInt("idPaciente");
                nome = rs.getString("NomePaciente");
                String rg = rs.getString("RG");

                txtNomePaciente.setText(nome);
                txtRG.setText(rg);
            }
            if(nome == null){
                JOptionPane.showMessageDialog(null, "Desculpe! O PACIENTE n√£o existe.", "Erro", JOptionPane.WARNING_MESSAGE);
                this.dispose();
                procurarPaciente.setVisible(true);
                procurarPaciente.setLocationRelativeTo(null);
                flag = true;
            }
            
            ResultSet rp = st.executeQuery("SELECT idExame, NomeExame FROM ListaExame WHERE NomeExame = '" + exameStatic + "';");
            
            // Ler cada registro da tabela para exibir no JTextArea
            String nomeE = null;
            while (rp.next()) {
                idE = rp.getInt("idExame");
                nomeE = rp.getString("NomeExame");
                myMap.put(nomeE, idE);
            }
            
            ResultSet ra = st.executeQuery("SELECT * FROM Agenda WHERE idPaciente = " + idP + ";");
            
            // Ler cada registro da tabela para exibir no JTextArea
            while (ra.next()) {
                String dia = ra.getString("Dia");
                String mes = ra.getString("Mes");
                String hora = ra.getString("Hora");
                String min = ra.getString("Min");
                String ano = ra.getString("Ano");
                idExame = ra.getInt("idExame");
                if(idExame == idE){
                    txtDia.setText(dia);
                    txtMes.setText(mes);
                    txtAno.setText(ano);
                    txtHora.setText(hora);
                    txtMin.setText(min);
                    txtExame.setText(nomeE);
                    flag = true;
                }
            }
           
            if(flag == false){
                JOptionPane.showMessageDialog(null, "Desculpe! O PACIENTE n√£o possui este AGENDAMENTO.", "Erro", JOptionPane.WARNING_MESSAGE);
                this.dispose();
                procurarPaciente.setVisible(true);
                procurarPaciente.setLocationRelativeTo(null);
            }
            
            //fecha a conex√£o
            st.close();
            c.close();
            
        } catch (ClassNotFoundException erro) {
            JOptionPane.showMessageDialog(null, " Driver JDBC n√£o encontrado!\n  " + erro.toString());
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, " Problemas na conex√£o com a fonte de dados!\n" + erro.toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void txtMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinKeyTyped

    private void txtAnoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAnoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAnoKeyTyped

    private void txtMesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMesKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMesKeyTyped

    private void txtDiaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiaKeyTyped

    private void txtHoraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHoraKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHoraKeyTyped

    private void txtExameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExameKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtExameKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormExcluirAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormExcluirAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormExcluirAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormExcluirAgenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormExcluirAgenda().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcluir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labDia;
    private javax.swing.JLabel labExame;
    private javax.swing.JLabel labHorario;
    private javax.swing.JLabel labNome;
    private javax.swing.JLabel labRG;
    private javax.swing.JPanel painel1;
    private javax.swing.JPanel painel2;
    private javax.swing.JTextField txtAno;
    private javax.swing.JTextField txtDia;
    private javax.swing.JTextField txtExame;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtMes;
    private javax.swing.JTextField txtMin;
    private javax.swing.JTextField txtNomePaciente;
    private javax.swing.JTextField txtRG;
    // End of variables declaration//GEN-END:variables
}
