/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Patrick Felipi Cursino Fonseca - TIA: 3125393-8
 */

import javax.swing.*;
import java.text.*;
import java.sql.*;

public class FormAlterarPaciente extends javax.swing.JFrame {
    static int idAtendente;
    static int idClinicaExterna;
    String rgStatic = null;
    String cpfStatic = null;
    /**
     * Creates new form FormAlterarPaciente
     */
    public FormAlterarPaciente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painel1 = new javax.swing.JPanel();
        labNome = new javax.swing.JLabel();
        txtNomePaciente = new javax.swing.JTextField();
        labRG = new javax.swing.JLabel();
        txtRG = new javax.swing.JTextField();
        labEndereco = new javax.swing.JLabel();
        txtEndereco = new javax.swing.JTextField();
        labCEP = new javax.swing.JLabel();
        txtCEP = new javax.swing.JTextField();
        labTelefone = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JTextField();
        labCPF = new javax.swing.JLabel();
        txtCPF = new javax.swing.JTextField();
        labAtendente = new javax.swing.JLabel();
        txtAtendente = new javax.swing.JTextField();
        labClinicaExterna = new javax.swing.JLabel();
        txtClinicaExterna = new javax.swing.JTextField();
        btnAtualizarPaciente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Alterar Paciente");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        painel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Paciente:"));

        labNome.setText("NOME DO PACIENTE :");

        txtNomePaciente.setToolTipText("Inserir Nome do Paciente");
        txtNomePaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomePacienteActionPerformed(evt);
            }
        });
        txtNomePaciente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNomePacienteKeyTyped(evt);
            }
        });

        labRG.setText("RG:");

        txtRG.setToolTipText("Inserir RG");
        txtRG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRGKeyTyped(evt);
            }
        });

        labEndereco.setText("ENDEREÇO :");
        labEndereco.setToolTipText("");

        txtEndereco.setToolTipText("Inserir Endereço");
        txtEndereco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEnderecoKeyTyped(evt);
            }
        });

        labCEP.setText("CEP :");

        txtCEP.setToolTipText("Inserir CEP");
        txtCEP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCEPKeyTyped(evt);
            }
        });

        labTelefone.setText("TELEFONE :");

        txtTelefone.setToolTipText("Inserir Telefone");
        txtTelefone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefoneKeyTyped(evt);
            }
        });

        labCPF.setText("CPF: ");
        labCPF.setToolTipText("");

        txtCPF.setToolTipText("Inserir CPF");
        txtCPF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCPFKeyTyped(evt);
            }
        });

        labAtendente.setText("ATENDENTE:");

        txtAtendente.setToolTipText("Atendente");
        txtAtendente.setEnabled(false);
        txtAtendente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAtendenteKeyTyped(evt);
            }
        });

        labClinicaExterna.setText("CLINICA EXTERNA:");

        txtClinicaExterna.setToolTipText("Clínica Externa");
        txtClinicaExterna.setEnabled(false);
        txtClinicaExterna.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtClinicaExternaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout painel1Layout = new javax.swing.GroupLayout(painel1);
        painel1.setLayout(painel1Layout);
        painel1Layout.setHorizontalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(labNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labRG)
                    .addGroup(painel1Layout.createSequentialGroup()
                        .addComponent(labEndereco)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painel1Layout.createSequentialGroup()
                            .addComponent(labCEP)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtCEP))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painel1Layout.createSequentialGroup()
                            .addComponent(labTelefone)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painel1Layout.createSequentialGroup()
                            .addComponent(labClinicaExterna)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtClinicaExterna))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painel1Layout.createSequentialGroup()
                            .addComponent(labAtendente)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtAtendente, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txtRG, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painel1Layout.createSequentialGroup()
                            .addComponent(labCPF)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        painel1Layout.setVerticalGroup(
            painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labNome)
                    .addComponent(txtNomePaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labRG)
                    .addComponent(txtRG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labCPF)
                    .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labEndereco)
                    .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labCEP)
                    .addComponent(txtCEP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labTelefone)
                    .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labAtendente)
                    .addComponent(txtAtendente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labClinicaExterna)
                    .addComponent(txtClinicaExterna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        btnAtualizarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Knob Refresh.png"))); // NOI18N
        btnAtualizarPaciente.setText("Atualizar Campos");
        btnAtualizarPaciente.setToolTipText("Atualizar Campos");
        btnAtualizarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarPacienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(btnAtualizarPaciente)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAtualizarPaciente)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomePacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomePacienteActionPerformed

    }//GEN-LAST:event_txtNomePacienteActionPerformed

    private void txtRGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRGKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
        int x = 0;
        String rg = txtRG.getText();
        x = rg.length();
        if(x == 12){
            evt.consume();
        }
    }//GEN-LAST:event_txtRGKeyTyped

    private void txtCEPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCEPKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
        int x = 0;
        String cep = txtCEP.getText();
        x = cep.length();
        if(x == 11){
            evt.consume();
        }
    }//GEN-LAST:event_txtCEPKeyTyped

    private void txtTelefoneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefoneKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
        int x = 0;
        String tel = txtTelefone.getText();
        x = tel.length();
        if(x == 15){
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefoneKeyTyped

    private void btnAtualizarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarPacienteActionPerformed
        String txt1 = txtNomePaciente.getText();
        String txt2 = txtRG.getText();
        String txt3 = txtCPF.getText();
        String txt4 = txtEndereco.getText();
        String txt5 = txtCEP.getText();
        String txt6 = txtTelefone.getText();
        if (txt1.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe o NOME DO PACIENTE !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtNomePaciente.grabFocus();
        } else if (txt2.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe o RG !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtRG.grabFocus();
        } else if (txt3.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe O CPF !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtCPF.grabFocus();
        } else if (txt4.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe O ENDEREÇO !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtEndereco.grabFocus();
        } else if (txt5.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe O CEP !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtCEP.grabFocus();
        } else if (txt6.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe O Telefone !!!", "Erro", JOptionPane.WARNING_MESSAGE);
            txtTelefone.grabFocus();
        } else {
            FormProcurarPaciente_Alterar procurarPaciente = new FormProcurarPaciente_Alterar();
            String retRG = procurarPaciente.retornoRG;
            String retCPF = procurarPaciente.retornoCPF;
            try {
                // fazer a conexão com o banco de dados
                Class.forName("com.mysql.jdbc.Driver");
                Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");

                //definir um objeto para uso dos comandos SQL
                Statement st = c.createStatement();

                //obter os dados digitados
                String nome = txtNomePaciente.getText();
                String rg = txtRG.getText();
                String cpf = txtCPF.getText();
                String endereco = txtEndereco.getText();
                String cep = txtCEP.getText();
                String telefone = txtTelefone.getText();

                String comando = null;
                if (rgStatic == null) {
                    comando = "UPDATE Paciente SET NomePaciente = '" + nome + "', RG = '" + rg + "', CPF = '" + cpf+ "', Endereco = '" + endereco + "', CEP = " + cep + ", Telefone = '" + telefone + "' WHERE CPF = '" + cpfStatic + "';";
                } else if (cpfStatic == null) {
                    comando = "UPDATE Paciente SET NomePaciente = '" + nome + "', RG = '" + rg + "', CPF = '" + cpf+ "', Endereco = '" + endereco + "', CEP = " + cep + ", Telefone = '" + telefone + "' WHERE RG = '" + rgStatic + "';";
                }
                //String comando = "UPDATE ClinicaExterna SET NomeClinica = '" + nome + "', CNPJ = '" + cnpj + "', Endereco = '" + endereco + "', CEP = " + cep + ", Telefone = '" + telefone + "' WHERE CNPJ = " + retCNPJ + ";";
                //String comando = "UPDATE professor SET nomeProf = ' " + nome + " ', drtProf = ' " + drt + " ', digitoProf = ' " + digito + " ', salarioProf = ' " + salario + " ', qntAulasProf = ' " + qntAulas + " ', salarioExtraProf = ' " + salarioExtra + " ' WHERE drtProf = ' " + retDRT + " ';";
                
                st.execute(comando);
                JOptionPane.showMessageDialog(null, "Paciente ALTERADO com sucesso !");

                //fecha a conexão2
                st.close();
                c.close();
                
                procurarPaciente.retornoRG = null;
                procurarPaciente.retornoCPF = null;

                this.dispose();
            } catch (ClassNotFoundException erro) {
                JOptionPane.showMessageDialog(null,
                        " Driver JDBC não encontrado !\n  " + erro.toString());

            } catch (SQLException erro) {
                JOptionPane.showMessageDialog(null,
                        " Problemas na conexão com a fonte de dados!\n" + erro.toString());
            }
        }
    }//GEN-LAST:event_btnAtualizarPacienteActionPerformed

    private void txtCPFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCPFKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
        int x = 0;
        String cpf = txtCPF.getText();
        x = cpf.length();
        if(x == 12){
            evt.consume();
        }
    }//GEN-LAST:event_txtCPFKeyTyped

    private void txtAtendenteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAtendenteKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAtendenteKeyTyped

    private void txtClinicaExternaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtClinicaExternaKeyTyped

    }//GEN-LAST:event_txtClinicaExternaKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        FormProcurarPaciente_Alterar procurarPaciente = new FormProcurarPaciente_Alterar();
        String retRG = procurarPaciente.retornoRG;
        String retCPF = procurarPaciente.retornoCPF;
        try {
            // fazer a conexão com o banco de dados
            Class.forName("com.mysql.jdbc.Driver");
            Connection c = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/Clinica", "root", "administrador");
            //definir um objeto para uso dos comandos SQL
            Statement st = c.createStatement();
            // definir o comando SELECt 
            
            ResultSet rs = null;
            if(retRG == null){
                rs = st.executeQuery("SELECT * FROM Paciente WHERE CPF = '" + retCPF + "';");
                cpfStatic = retCPF;
            }else if(retCPF == null){
                rs = st.executeQuery("SELECT * FROM Paciente WHERE RG = '" + retRG + "';");
                rgStatic = retRG;
            }
            String nome = null;
            // Ler cada registro da tabela para exibir no JTextArea
            while (rs.next()) {

                nome = rs.getString("NomePaciente");
                String rg = rs.getString("RG");
                String cpf = rs.getString("CPF");
                String endereco = rs.getString("Endereco");
                int cep = rs.getInt("CEP");
                String telefone = rs.getString("Telefone");
                idAtendente = rs.getInt("idAtendente");
                idClinicaExterna = rs.getInt("idClinicaExterna");

                txtNomePaciente.setText(nome);
                txtRG.setText(rg);
                txtCPF.setText(cpf);
                txtEndereco.setText(endereco);
                txtCEP.setText(String.valueOf(cep));
                txtTelefone.setText(telefone);
            }
            if(nome == null){
                JOptionPane.showMessageDialog(null, "Desculpe! O PACIENTE não existe.", "Erro", JOptionPane.WARNING_MESSAGE);
                this.dispose();
                procurarPaciente.setVisible(true);
                procurarPaciente.setLocationRelativeTo(null);
            }
            
            ResultSet rp = st.executeQuery("SELECT NomeAtendente FROM Atendente WHERE idAtendente = " + idAtendente + ";");
            
            while (rp.next()) {
                String nomeAtendente = rp.getString("NomeAtendente");            
                txtAtendente.setText(nomeAtendente);
            }
            
            ResultSet rt = st.executeQuery("SELECT NomeClinica FROM ClinicaExterna WHERE idClinicaExterna = " + idClinicaExterna + ";");
            
            String nomeClinica = null;
            while (rt.next()) {
                nomeClinica = rt.getString("NomeClinica");            
                txtClinicaExterna.setText(nomeClinica);
            }
            
            if(nomeClinica == null){
                txtClinicaExterna.setText("NÃO TEM");
            }
            
            //fecha a conexão
            st.close();
            c.close();
            
            procurarPaciente.retornoRG = null;
            procurarPaciente.retornoCPF = null;
            
        } catch (ClassNotFoundException erro) {
            JOptionPane.showMessageDialog(null, " Driver JDBC não encontrado!\n  " + erro.toString());
        } catch (SQLException erro) {
            JOptionPane.showMessageDialog(null, " Problemas na conexão com a fonte de dados!\n" + erro.toString());
        }
    }//GEN-LAST:event_formWindowOpened

    private void txtNomePacienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomePacienteKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetter(c)){
            if(!Character.isWhitespace(c)){
                evt.consume();
            }
        }
        int x = 0;
        String nome = txtNomePaciente.getText();
        x = nome.length();
        if(x == 45){
            evt.consume();
        }
    }//GEN-LAST:event_txtNomePacienteKeyTyped

    private void txtEnderecoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEnderecoKeyTyped
        int x = 0;
        String endereco = txtEndereco.getText();
        x = endereco.length();
        if(x == 35){
            evt.consume();
        }
    }//GEN-LAST:event_txtEnderecoKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAlterarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAlterarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAlterarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAlterarPaciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormAlterarPaciente().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizarPaciente;
    private javax.swing.JLabel labAtendente;
    private javax.swing.JLabel labCEP;
    private javax.swing.JLabel labCPF;
    private javax.swing.JLabel labClinicaExterna;
    private javax.swing.JLabel labEndereco;
    private javax.swing.JLabel labNome;
    private javax.swing.JLabel labRG;
    private javax.swing.JLabel labTelefone;
    private javax.swing.JPanel painel1;
    private javax.swing.JTextField txtAtendente;
    private javax.swing.JTextField txtCEP;
    private javax.swing.JTextField txtCPF;
    private javax.swing.JTextField txtClinicaExterna;
    private javax.swing.JTextField txtEndereco;
    private javax.swing.JTextField txtNomePaciente;
    private javax.swing.JTextField txtRG;
    private javax.swing.JTextField txtTelefone;
    // End of variables declaration//GEN-END:variables
}
